#!/bin/bash

config_directory="/etc/mkefiboot.d/"
mkdir -p $config_directory

create_boot_entries() {
    for f in "$config_directory"/*.conf; do
        echo $f
        . $f

        # Parse disk and check if it is prefixed with a UUID
        # This is a workaround for nvme drives changing so much
        if [[ $disk == UUID=* ]]; then
            disk_uuid=${disk#UUID=}
            disk="/dev/$(lsblk -no pkname $(blkid -U $disk_uuid))"
            partition="$(blkid -U $disk_uuid | tail -c 2)"
        fi

        label="${label:=Linux}"
        disk="${disk:?}"
        partition="${partition:?}"
        loader="${loader:=/vmlinuz-linux}"
        options="${options:=}"
        set_first="${set_first:=false}"

        # Find an existing entry with the same label prefix
        existing_boot_num=$(efibootmgr | grep "\* $label" | cut -d' ' -f 1 | sed 's/.$//' | sed 's/Boot//')

        # Save the current boot order
        current_boot_order=$(efibootmgr | grep -oP "BootOrder: \K[0-9A-Fa-f,]+")

        if [[ -n "$existing_boot_num" ]]; then
            echo "Updating existing entry $existing_boot_num"
            # Update the existing entry
            efibootmgr -b $existing_boot_num -B
            efibootmgr \
                --create \
                --bootnum "$existing_boot_num" \
                --label "$label" \
                --disk "$disk" \
                --part "$partition" \
                --loader "$loader" \
                --unicode "$(pivot "$options" " ")"
        else
            # Create a new entry
            echo "Creating new boot entry"
            efibootmgr \
                --create \
                --label "$label" \
                --disk "$disk" \
                --part "$partition" \
                --loader "$loader" \
                --unicode "$(pivot "$options" " ")"

            # Get the boot number of the newly created entry
            new_boot_num=$(efibootmgr | grep -oP "Boot\K[0-9A-Fa-f]{4}(?=.*?${label})")

            # Add the new boot number to the boot order
            current_boot_order="$current_boot_order,$new_boot_num"
        fi

        # Restore the boot order
        efibootmgr \
            --bootorder "$current_boot_order" \
            $quiet
    done

}

# helper functions
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "this script needs root privileges to run"
        exit 1
    fi
}

pivot() {
    printf "%s\n" "$1" |
        awk '{gsub(/^ +| +$/,"")} !/^($|#)/ {print $0}' |
        {
            while IFS= read -r line; do
                if [ -n "$entry" ]; then
                    entry="$entry$2$(printf "%s" "$line")"
                else
                    entry="$(printf "%s" "$line")"
                fi
            done
            printf "%s\n" "$entry"
        }
}

check_root

[ -n "$1" ] && config_directory="$1"
create_boot_entries
